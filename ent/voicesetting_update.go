// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kechako/yomiko/ent/predicate"
	"github.com/kechako/yomiko/ent/voicesetting"
)

// VoiceSettingUpdate is the builder for updating VoiceSetting entities.
type VoiceSettingUpdate struct {
	config
	hooks    []Hook
	mutation *VoiceSettingMutation
}

// Where appends a list predicates to the VoiceSettingUpdate builder.
func (vsu *VoiceSettingUpdate) Where(ps ...predicate.VoiceSetting) *VoiceSettingUpdate {
	vsu.mutation.Where(ps...)
	return vsu
}

// SetVoiceName sets the "voice_name" field.
func (vsu *VoiceSettingUpdate) SetVoiceName(s string) *VoiceSettingUpdate {
	vsu.mutation.SetVoiceName(s)
	return vsu
}

// SetNillableVoiceName sets the "voice_name" field if the given value is not nil.
func (vsu *VoiceSettingUpdate) SetNillableVoiceName(s *string) *VoiceSettingUpdate {
	if s != nil {
		vsu.SetVoiceName(*s)
	}
	return vsu
}

// ClearVoiceName clears the value of the "voice_name" field.
func (vsu *VoiceSettingUpdate) ClearVoiceName() *VoiceSettingUpdate {
	vsu.mutation.ClearVoiceName()
	return vsu
}

// SetSpeakingRate sets the "speaking_rate" field.
func (vsu *VoiceSettingUpdate) SetSpeakingRate(f float64) *VoiceSettingUpdate {
	vsu.mutation.ResetSpeakingRate()
	vsu.mutation.SetSpeakingRate(f)
	return vsu
}

// SetNillableSpeakingRate sets the "speaking_rate" field if the given value is not nil.
func (vsu *VoiceSettingUpdate) SetNillableSpeakingRate(f *float64) *VoiceSettingUpdate {
	if f != nil {
		vsu.SetSpeakingRate(*f)
	}
	return vsu
}

// AddSpeakingRate adds f to the "speaking_rate" field.
func (vsu *VoiceSettingUpdate) AddSpeakingRate(f float64) *VoiceSettingUpdate {
	vsu.mutation.AddSpeakingRate(f)
	return vsu
}

// ClearSpeakingRate clears the value of the "speaking_rate" field.
func (vsu *VoiceSettingUpdate) ClearSpeakingRate() *VoiceSettingUpdate {
	vsu.mutation.ClearSpeakingRate()
	return vsu
}

// SetPitch sets the "pitch" field.
func (vsu *VoiceSettingUpdate) SetPitch(f float64) *VoiceSettingUpdate {
	vsu.mutation.ResetPitch()
	vsu.mutation.SetPitch(f)
	return vsu
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (vsu *VoiceSettingUpdate) SetNillablePitch(f *float64) *VoiceSettingUpdate {
	if f != nil {
		vsu.SetPitch(*f)
	}
	return vsu
}

// AddPitch adds f to the "pitch" field.
func (vsu *VoiceSettingUpdate) AddPitch(f float64) *VoiceSettingUpdate {
	vsu.mutation.AddPitch(f)
	return vsu
}

// ClearPitch clears the value of the "pitch" field.
func (vsu *VoiceSettingUpdate) ClearPitch() *VoiceSettingUpdate {
	vsu.mutation.ClearPitch()
	return vsu
}

// Mutation returns the VoiceSettingMutation object of the builder.
func (vsu *VoiceSettingUpdate) Mutation() *VoiceSettingMutation {
	return vsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vsu *VoiceSettingUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vsu.sqlSave, vsu.mutation, vsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsu *VoiceSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := vsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vsu *VoiceSettingUpdate) Exec(ctx context.Context) error {
	_, err := vsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsu *VoiceSettingUpdate) ExecX(ctx context.Context) {
	if err := vsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsu *VoiceSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(voicesetting.Table, voicesetting.Columns, sqlgraph.NewFieldSpec(voicesetting.FieldID, field.TypeInt))
	if ps := vsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsu.mutation.VoiceName(); ok {
		_spec.SetField(voicesetting.FieldVoiceName, field.TypeString, value)
	}
	if vsu.mutation.VoiceNameCleared() {
		_spec.ClearField(voicesetting.FieldVoiceName, field.TypeString)
	}
	if value, ok := vsu.mutation.SpeakingRate(); ok {
		_spec.SetField(voicesetting.FieldSpeakingRate, field.TypeFloat64, value)
	}
	if value, ok := vsu.mutation.AddedSpeakingRate(); ok {
		_spec.AddField(voicesetting.FieldSpeakingRate, field.TypeFloat64, value)
	}
	if vsu.mutation.SpeakingRateCleared() {
		_spec.ClearField(voicesetting.FieldSpeakingRate, field.TypeFloat64)
	}
	if value, ok := vsu.mutation.Pitch(); ok {
		_spec.SetField(voicesetting.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := vsu.mutation.AddedPitch(); ok {
		_spec.AddField(voicesetting.FieldPitch, field.TypeFloat64, value)
	}
	if vsu.mutation.PitchCleared() {
		_spec.ClearField(voicesetting.FieldPitch, field.TypeFloat64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voicesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vsu.mutation.done = true
	return n, nil
}

// VoiceSettingUpdateOne is the builder for updating a single VoiceSetting entity.
type VoiceSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VoiceSettingMutation
}

// SetVoiceName sets the "voice_name" field.
func (vsuo *VoiceSettingUpdateOne) SetVoiceName(s string) *VoiceSettingUpdateOne {
	vsuo.mutation.SetVoiceName(s)
	return vsuo
}

// SetNillableVoiceName sets the "voice_name" field if the given value is not nil.
func (vsuo *VoiceSettingUpdateOne) SetNillableVoiceName(s *string) *VoiceSettingUpdateOne {
	if s != nil {
		vsuo.SetVoiceName(*s)
	}
	return vsuo
}

// ClearVoiceName clears the value of the "voice_name" field.
func (vsuo *VoiceSettingUpdateOne) ClearVoiceName() *VoiceSettingUpdateOne {
	vsuo.mutation.ClearVoiceName()
	return vsuo
}

// SetSpeakingRate sets the "speaking_rate" field.
func (vsuo *VoiceSettingUpdateOne) SetSpeakingRate(f float64) *VoiceSettingUpdateOne {
	vsuo.mutation.ResetSpeakingRate()
	vsuo.mutation.SetSpeakingRate(f)
	return vsuo
}

// SetNillableSpeakingRate sets the "speaking_rate" field if the given value is not nil.
func (vsuo *VoiceSettingUpdateOne) SetNillableSpeakingRate(f *float64) *VoiceSettingUpdateOne {
	if f != nil {
		vsuo.SetSpeakingRate(*f)
	}
	return vsuo
}

// AddSpeakingRate adds f to the "speaking_rate" field.
func (vsuo *VoiceSettingUpdateOne) AddSpeakingRate(f float64) *VoiceSettingUpdateOne {
	vsuo.mutation.AddSpeakingRate(f)
	return vsuo
}

// ClearSpeakingRate clears the value of the "speaking_rate" field.
func (vsuo *VoiceSettingUpdateOne) ClearSpeakingRate() *VoiceSettingUpdateOne {
	vsuo.mutation.ClearSpeakingRate()
	return vsuo
}

// SetPitch sets the "pitch" field.
func (vsuo *VoiceSettingUpdateOne) SetPitch(f float64) *VoiceSettingUpdateOne {
	vsuo.mutation.ResetPitch()
	vsuo.mutation.SetPitch(f)
	return vsuo
}

// SetNillablePitch sets the "pitch" field if the given value is not nil.
func (vsuo *VoiceSettingUpdateOne) SetNillablePitch(f *float64) *VoiceSettingUpdateOne {
	if f != nil {
		vsuo.SetPitch(*f)
	}
	return vsuo
}

// AddPitch adds f to the "pitch" field.
func (vsuo *VoiceSettingUpdateOne) AddPitch(f float64) *VoiceSettingUpdateOne {
	vsuo.mutation.AddPitch(f)
	return vsuo
}

// ClearPitch clears the value of the "pitch" field.
func (vsuo *VoiceSettingUpdateOne) ClearPitch() *VoiceSettingUpdateOne {
	vsuo.mutation.ClearPitch()
	return vsuo
}

// Mutation returns the VoiceSettingMutation object of the builder.
func (vsuo *VoiceSettingUpdateOne) Mutation() *VoiceSettingMutation {
	return vsuo.mutation
}

// Where appends a list predicates to the VoiceSettingUpdate builder.
func (vsuo *VoiceSettingUpdateOne) Where(ps ...predicate.VoiceSetting) *VoiceSettingUpdateOne {
	vsuo.mutation.Where(ps...)
	return vsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vsuo *VoiceSettingUpdateOne) Select(field string, fields ...string) *VoiceSettingUpdateOne {
	vsuo.fields = append([]string{field}, fields...)
	return vsuo
}

// Save executes the query and returns the updated VoiceSetting entity.
func (vsuo *VoiceSettingUpdateOne) Save(ctx context.Context) (*VoiceSetting, error) {
	return withHooks(ctx, vsuo.sqlSave, vsuo.mutation, vsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vsuo *VoiceSettingUpdateOne) SaveX(ctx context.Context) *VoiceSetting {
	node, err := vsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vsuo *VoiceSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := vsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vsuo *VoiceSettingUpdateOne) ExecX(ctx context.Context) {
	if err := vsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vsuo *VoiceSettingUpdateOne) sqlSave(ctx context.Context) (_node *VoiceSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(voicesetting.Table, voicesetting.Columns, sqlgraph.NewFieldSpec(voicesetting.FieldID, field.TypeInt))
	id, ok := vsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "VoiceSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, voicesetting.FieldID)
		for _, f := range fields {
			if !voicesetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != voicesetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vsuo.mutation.VoiceName(); ok {
		_spec.SetField(voicesetting.FieldVoiceName, field.TypeString, value)
	}
	if vsuo.mutation.VoiceNameCleared() {
		_spec.ClearField(voicesetting.FieldVoiceName, field.TypeString)
	}
	if value, ok := vsuo.mutation.SpeakingRate(); ok {
		_spec.SetField(voicesetting.FieldSpeakingRate, field.TypeFloat64, value)
	}
	if value, ok := vsuo.mutation.AddedSpeakingRate(); ok {
		_spec.AddField(voicesetting.FieldSpeakingRate, field.TypeFloat64, value)
	}
	if vsuo.mutation.SpeakingRateCleared() {
		_spec.ClearField(voicesetting.FieldSpeakingRate, field.TypeFloat64)
	}
	if value, ok := vsuo.mutation.Pitch(); ok {
		_spec.SetField(voicesetting.FieldPitch, field.TypeFloat64, value)
	}
	if value, ok := vsuo.mutation.AddedPitch(); ok {
		_spec.AddField(voicesetting.FieldPitch, field.TypeFloat64, value)
	}
	if vsuo.mutation.PitchCleared() {
		_spec.ClearField(voicesetting.FieldPitch, field.TypeFloat64)
	}
	_node = &VoiceSetting{config: vsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{voicesetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vsuo.mutation.done = true
	return _node, nil
}
