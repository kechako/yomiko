// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kechako/yomiko/ent/predicate"
	"github.com/kechako/yomiko/ent/voicesetting"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeVoiceSetting = "VoiceSetting"
)

// VoiceSettingMutation represents an operation that mutates the VoiceSetting nodes in the graph.
type VoiceSettingMutation struct {
	config
	op               Op
	typ              string
	id               *int
	user_id          *string
	voice_name       *string
	speaking_rate    *float64
	addspeaking_rate *float64
	pitch            *float64
	addpitch         *float64
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*VoiceSetting, error)
	predicates       []predicate.VoiceSetting
}

var _ ent.Mutation = (*VoiceSettingMutation)(nil)

// voicesettingOption allows management of the mutation configuration using functional options.
type voicesettingOption func(*VoiceSettingMutation)

// newVoiceSettingMutation creates new mutation for the VoiceSetting entity.
func newVoiceSettingMutation(c config, op Op, opts ...voicesettingOption) *VoiceSettingMutation {
	m := &VoiceSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeVoiceSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVoiceSettingID sets the ID field of the mutation.
func withVoiceSettingID(id int) voicesettingOption {
	return func(m *VoiceSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *VoiceSetting
		)
		m.oldValue = func(ctx context.Context) (*VoiceSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().VoiceSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVoiceSetting sets the old VoiceSetting of the mutation.
func withVoiceSetting(node *VoiceSetting) voicesettingOption {
	return func(m *VoiceSettingMutation) {
		m.oldValue = func(context.Context) (*VoiceSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VoiceSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VoiceSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VoiceSettingMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VoiceSettingMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().VoiceSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *VoiceSettingMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *VoiceSettingMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the VoiceSetting entity.
// If the VoiceSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoiceSettingMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *VoiceSettingMutation) ResetUserID() {
	m.user_id = nil
}

// SetVoiceName sets the "voice_name" field.
func (m *VoiceSettingMutation) SetVoiceName(s string) {
	m.voice_name = &s
}

// VoiceName returns the value of the "voice_name" field in the mutation.
func (m *VoiceSettingMutation) VoiceName() (r string, exists bool) {
	v := m.voice_name
	if v == nil {
		return
	}
	return *v, true
}

// OldVoiceName returns the old "voice_name" field's value of the VoiceSetting entity.
// If the VoiceSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoiceSettingMutation) OldVoiceName(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoiceName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoiceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoiceName: %w", err)
	}
	return oldValue.VoiceName, nil
}

// ClearVoiceName clears the value of the "voice_name" field.
func (m *VoiceSettingMutation) ClearVoiceName() {
	m.voice_name = nil
	m.clearedFields[voicesetting.FieldVoiceName] = struct{}{}
}

// VoiceNameCleared returns if the "voice_name" field was cleared in this mutation.
func (m *VoiceSettingMutation) VoiceNameCleared() bool {
	_, ok := m.clearedFields[voicesetting.FieldVoiceName]
	return ok
}

// ResetVoiceName resets all changes to the "voice_name" field.
func (m *VoiceSettingMutation) ResetVoiceName() {
	m.voice_name = nil
	delete(m.clearedFields, voicesetting.FieldVoiceName)
}

// SetSpeakingRate sets the "speaking_rate" field.
func (m *VoiceSettingMutation) SetSpeakingRate(f float64) {
	m.speaking_rate = &f
	m.addspeaking_rate = nil
}

// SpeakingRate returns the value of the "speaking_rate" field in the mutation.
func (m *VoiceSettingMutation) SpeakingRate() (r float64, exists bool) {
	v := m.speaking_rate
	if v == nil {
		return
	}
	return *v, true
}

// OldSpeakingRate returns the old "speaking_rate" field's value of the VoiceSetting entity.
// If the VoiceSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoiceSettingMutation) OldSpeakingRate(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSpeakingRate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSpeakingRate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSpeakingRate: %w", err)
	}
	return oldValue.SpeakingRate, nil
}

// AddSpeakingRate adds f to the "speaking_rate" field.
func (m *VoiceSettingMutation) AddSpeakingRate(f float64) {
	if m.addspeaking_rate != nil {
		*m.addspeaking_rate += f
	} else {
		m.addspeaking_rate = &f
	}
}

// AddedSpeakingRate returns the value that was added to the "speaking_rate" field in this mutation.
func (m *VoiceSettingMutation) AddedSpeakingRate() (r float64, exists bool) {
	v := m.addspeaking_rate
	if v == nil {
		return
	}
	return *v, true
}

// ClearSpeakingRate clears the value of the "speaking_rate" field.
func (m *VoiceSettingMutation) ClearSpeakingRate() {
	m.speaking_rate = nil
	m.addspeaking_rate = nil
	m.clearedFields[voicesetting.FieldSpeakingRate] = struct{}{}
}

// SpeakingRateCleared returns if the "speaking_rate" field was cleared in this mutation.
func (m *VoiceSettingMutation) SpeakingRateCleared() bool {
	_, ok := m.clearedFields[voicesetting.FieldSpeakingRate]
	return ok
}

// ResetSpeakingRate resets all changes to the "speaking_rate" field.
func (m *VoiceSettingMutation) ResetSpeakingRate() {
	m.speaking_rate = nil
	m.addspeaking_rate = nil
	delete(m.clearedFields, voicesetting.FieldSpeakingRate)
}

// SetPitch sets the "pitch" field.
func (m *VoiceSettingMutation) SetPitch(f float64) {
	m.pitch = &f
	m.addpitch = nil
}

// Pitch returns the value of the "pitch" field in the mutation.
func (m *VoiceSettingMutation) Pitch() (r float64, exists bool) {
	v := m.pitch
	if v == nil {
		return
	}
	return *v, true
}

// OldPitch returns the old "pitch" field's value of the VoiceSetting entity.
// If the VoiceSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VoiceSettingMutation) OldPitch(ctx context.Context) (v *float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPitch is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPitch requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPitch: %w", err)
	}
	return oldValue.Pitch, nil
}

// AddPitch adds f to the "pitch" field.
func (m *VoiceSettingMutation) AddPitch(f float64) {
	if m.addpitch != nil {
		*m.addpitch += f
	} else {
		m.addpitch = &f
	}
}

// AddedPitch returns the value that was added to the "pitch" field in this mutation.
func (m *VoiceSettingMutation) AddedPitch() (r float64, exists bool) {
	v := m.addpitch
	if v == nil {
		return
	}
	return *v, true
}

// ClearPitch clears the value of the "pitch" field.
func (m *VoiceSettingMutation) ClearPitch() {
	m.pitch = nil
	m.addpitch = nil
	m.clearedFields[voicesetting.FieldPitch] = struct{}{}
}

// PitchCleared returns if the "pitch" field was cleared in this mutation.
func (m *VoiceSettingMutation) PitchCleared() bool {
	_, ok := m.clearedFields[voicesetting.FieldPitch]
	return ok
}

// ResetPitch resets all changes to the "pitch" field.
func (m *VoiceSettingMutation) ResetPitch() {
	m.pitch = nil
	m.addpitch = nil
	delete(m.clearedFields, voicesetting.FieldPitch)
}

// Where appends a list predicates to the VoiceSettingMutation builder.
func (m *VoiceSettingMutation) Where(ps ...predicate.VoiceSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the VoiceSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *VoiceSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.VoiceSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *VoiceSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *VoiceSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (VoiceSetting).
func (m *VoiceSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VoiceSettingMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.user_id != nil {
		fields = append(fields, voicesetting.FieldUserID)
	}
	if m.voice_name != nil {
		fields = append(fields, voicesetting.FieldVoiceName)
	}
	if m.speaking_rate != nil {
		fields = append(fields, voicesetting.FieldSpeakingRate)
	}
	if m.pitch != nil {
		fields = append(fields, voicesetting.FieldPitch)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VoiceSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case voicesetting.FieldUserID:
		return m.UserID()
	case voicesetting.FieldVoiceName:
		return m.VoiceName()
	case voicesetting.FieldSpeakingRate:
		return m.SpeakingRate()
	case voicesetting.FieldPitch:
		return m.Pitch()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VoiceSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case voicesetting.FieldUserID:
		return m.OldUserID(ctx)
	case voicesetting.FieldVoiceName:
		return m.OldVoiceName(ctx)
	case voicesetting.FieldSpeakingRate:
		return m.OldSpeakingRate(ctx)
	case voicesetting.FieldPitch:
		return m.OldPitch(ctx)
	}
	return nil, fmt.Errorf("unknown VoiceSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoiceSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case voicesetting.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case voicesetting.FieldVoiceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoiceName(v)
		return nil
	case voicesetting.FieldSpeakingRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSpeakingRate(v)
		return nil
	case voicesetting.FieldPitch:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPitch(v)
		return nil
	}
	return fmt.Errorf("unknown VoiceSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VoiceSettingMutation) AddedFields() []string {
	var fields []string
	if m.addspeaking_rate != nil {
		fields = append(fields, voicesetting.FieldSpeakingRate)
	}
	if m.addpitch != nil {
		fields = append(fields, voicesetting.FieldPitch)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VoiceSettingMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case voicesetting.FieldSpeakingRate:
		return m.AddedSpeakingRate()
	case voicesetting.FieldPitch:
		return m.AddedPitch()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VoiceSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	case voicesetting.FieldSpeakingRate:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSpeakingRate(v)
		return nil
	case voicesetting.FieldPitch:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPitch(v)
		return nil
	}
	return fmt.Errorf("unknown VoiceSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VoiceSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(voicesetting.FieldVoiceName) {
		fields = append(fields, voicesetting.FieldVoiceName)
	}
	if m.FieldCleared(voicesetting.FieldSpeakingRate) {
		fields = append(fields, voicesetting.FieldSpeakingRate)
	}
	if m.FieldCleared(voicesetting.FieldPitch) {
		fields = append(fields, voicesetting.FieldPitch)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VoiceSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VoiceSettingMutation) ClearField(name string) error {
	switch name {
	case voicesetting.FieldVoiceName:
		m.ClearVoiceName()
		return nil
	case voicesetting.FieldSpeakingRate:
		m.ClearSpeakingRate()
		return nil
	case voicesetting.FieldPitch:
		m.ClearPitch()
		return nil
	}
	return fmt.Errorf("unknown VoiceSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VoiceSettingMutation) ResetField(name string) error {
	switch name {
	case voicesetting.FieldUserID:
		m.ResetUserID()
		return nil
	case voicesetting.FieldVoiceName:
		m.ResetVoiceName()
		return nil
	case voicesetting.FieldSpeakingRate:
		m.ResetSpeakingRate()
		return nil
	case voicesetting.FieldPitch:
		m.ResetPitch()
		return nil
	}
	return fmt.Errorf("unknown VoiceSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VoiceSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VoiceSettingMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VoiceSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VoiceSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VoiceSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VoiceSettingMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VoiceSettingMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown VoiceSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VoiceSettingMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown VoiceSetting edge %s", name)
}
