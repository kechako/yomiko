// Code generated by ent, DO NOT EDIT.

package voicesetting

import (
	"entgo.io/ent/dialect/sql"
	"github.com/kechako/yomiko/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldUserID, v))
}

// VoiceName applies equality check predicate on the "voice_name" field. It's identical to VoiceNameEQ.
func VoiceName(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldVoiceName, v))
}

// SpeakingRate applies equality check predicate on the "speaking_rate" field. It's identical to SpeakingRateEQ.
func SpeakingRate(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldSpeakingRate, v))
}

// Pitch applies equality check predicate on the "pitch" field. It's identical to PitchEQ.
func Pitch(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldPitch, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldContainsFold(FieldUserID, v))
}

// VoiceNameEQ applies the EQ predicate on the "voice_name" field.
func VoiceNameEQ(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldVoiceName, v))
}

// VoiceNameNEQ applies the NEQ predicate on the "voice_name" field.
func VoiceNameNEQ(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNEQ(FieldVoiceName, v))
}

// VoiceNameIn applies the In predicate on the "voice_name" field.
func VoiceNameIn(vs ...string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIn(FieldVoiceName, vs...))
}

// VoiceNameNotIn applies the NotIn predicate on the "voice_name" field.
func VoiceNameNotIn(vs ...string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotIn(FieldVoiceName, vs...))
}

// VoiceNameGT applies the GT predicate on the "voice_name" field.
func VoiceNameGT(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGT(FieldVoiceName, v))
}

// VoiceNameGTE applies the GTE predicate on the "voice_name" field.
func VoiceNameGTE(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGTE(FieldVoiceName, v))
}

// VoiceNameLT applies the LT predicate on the "voice_name" field.
func VoiceNameLT(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLT(FieldVoiceName, v))
}

// VoiceNameLTE applies the LTE predicate on the "voice_name" field.
func VoiceNameLTE(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLTE(FieldVoiceName, v))
}

// VoiceNameContains applies the Contains predicate on the "voice_name" field.
func VoiceNameContains(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldContains(FieldVoiceName, v))
}

// VoiceNameHasPrefix applies the HasPrefix predicate on the "voice_name" field.
func VoiceNameHasPrefix(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldHasPrefix(FieldVoiceName, v))
}

// VoiceNameHasSuffix applies the HasSuffix predicate on the "voice_name" field.
func VoiceNameHasSuffix(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldHasSuffix(FieldVoiceName, v))
}

// VoiceNameIsNil applies the IsNil predicate on the "voice_name" field.
func VoiceNameIsNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIsNull(FieldVoiceName))
}

// VoiceNameNotNil applies the NotNil predicate on the "voice_name" field.
func VoiceNameNotNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotNull(FieldVoiceName))
}

// VoiceNameEqualFold applies the EqualFold predicate on the "voice_name" field.
func VoiceNameEqualFold(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEqualFold(FieldVoiceName, v))
}

// VoiceNameContainsFold applies the ContainsFold predicate on the "voice_name" field.
func VoiceNameContainsFold(v string) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldContainsFold(FieldVoiceName, v))
}

// SpeakingRateEQ applies the EQ predicate on the "speaking_rate" field.
func SpeakingRateEQ(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldSpeakingRate, v))
}

// SpeakingRateNEQ applies the NEQ predicate on the "speaking_rate" field.
func SpeakingRateNEQ(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNEQ(FieldSpeakingRate, v))
}

// SpeakingRateIn applies the In predicate on the "speaking_rate" field.
func SpeakingRateIn(vs ...float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIn(FieldSpeakingRate, vs...))
}

// SpeakingRateNotIn applies the NotIn predicate on the "speaking_rate" field.
func SpeakingRateNotIn(vs ...float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotIn(FieldSpeakingRate, vs...))
}

// SpeakingRateGT applies the GT predicate on the "speaking_rate" field.
func SpeakingRateGT(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGT(FieldSpeakingRate, v))
}

// SpeakingRateGTE applies the GTE predicate on the "speaking_rate" field.
func SpeakingRateGTE(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGTE(FieldSpeakingRate, v))
}

// SpeakingRateLT applies the LT predicate on the "speaking_rate" field.
func SpeakingRateLT(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLT(FieldSpeakingRate, v))
}

// SpeakingRateLTE applies the LTE predicate on the "speaking_rate" field.
func SpeakingRateLTE(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLTE(FieldSpeakingRate, v))
}

// SpeakingRateIsNil applies the IsNil predicate on the "speaking_rate" field.
func SpeakingRateIsNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIsNull(FieldSpeakingRate))
}

// SpeakingRateNotNil applies the NotNil predicate on the "speaking_rate" field.
func SpeakingRateNotNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotNull(FieldSpeakingRate))
}

// PitchEQ applies the EQ predicate on the "pitch" field.
func PitchEQ(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldEQ(FieldPitch, v))
}

// PitchNEQ applies the NEQ predicate on the "pitch" field.
func PitchNEQ(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNEQ(FieldPitch, v))
}

// PitchIn applies the In predicate on the "pitch" field.
func PitchIn(vs ...float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIn(FieldPitch, vs...))
}

// PitchNotIn applies the NotIn predicate on the "pitch" field.
func PitchNotIn(vs ...float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotIn(FieldPitch, vs...))
}

// PitchGT applies the GT predicate on the "pitch" field.
func PitchGT(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGT(FieldPitch, v))
}

// PitchGTE applies the GTE predicate on the "pitch" field.
func PitchGTE(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldGTE(FieldPitch, v))
}

// PitchLT applies the LT predicate on the "pitch" field.
func PitchLT(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLT(FieldPitch, v))
}

// PitchLTE applies the LTE predicate on the "pitch" field.
func PitchLTE(v float64) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldLTE(FieldPitch, v))
}

// PitchIsNil applies the IsNil predicate on the "pitch" field.
func PitchIsNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldIsNull(FieldPitch))
}

// PitchNotNil applies the NotNil predicate on the "pitch" field.
func PitchNotNil() predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.FieldNotNull(FieldPitch))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.VoiceSetting) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.VoiceSetting) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.VoiceSetting) predicate.VoiceSetting {
	return predicate.VoiceSetting(sql.NotPredicates(p))
}
