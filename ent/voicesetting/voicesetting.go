// Code generated by ent, DO NOT EDIT.

package voicesetting

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the voicesetting type in the database.
	Label = "voice_setting"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldVoiceName holds the string denoting the voice_name field in the database.
	FieldVoiceName = "voice_name"
	// FieldSpeakingRate holds the string denoting the speaking_rate field in the database.
	FieldSpeakingRate = "speaking_rate"
	// FieldPitch holds the string denoting the pitch field in the database.
	FieldPitch = "pitch"
	// Table holds the table name of the voicesetting in the database.
	Table = "voice_settings"
)

// Columns holds all SQL columns for voicesetting fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldVoiceName,
	FieldSpeakingRate,
	FieldPitch,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
)

// OrderOption defines the ordering options for the VoiceSetting queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByVoiceName orders the results by the voice_name field.
func ByVoiceName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoiceName, opts...).ToFunc()
}

// BySpeakingRate orders the results by the speaking_rate field.
func BySpeakingRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpeakingRate, opts...).ToFunc()
}

// ByPitch orders the results by the pitch field.
func ByPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPitch, opts...).ToFunc()
}
