// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kechako/yomiko/ent/voicesetting"
)

// VoiceSetting is the model entity for the VoiceSetting schema.
type VoiceSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// VoiceName holds the value of the "voice_name" field.
	VoiceName *string `json:"voice_name,omitempty"`
	// SpeakingRate holds the value of the "speaking_rate" field.
	SpeakingRate *float64 `json:"speaking_rate,omitempty"`
	// Pitch holds the value of the "pitch" field.
	Pitch        *float64 `json:"pitch,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*VoiceSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case voicesetting.FieldSpeakingRate, voicesetting.FieldPitch:
			values[i] = new(sql.NullFloat64)
		case voicesetting.FieldID:
			values[i] = new(sql.NullInt64)
		case voicesetting.FieldUserID, voicesetting.FieldVoiceName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the VoiceSetting fields.
func (vs *VoiceSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case voicesetting.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			vs.ID = int(value.Int64)
		case voicesetting.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				vs.UserID = value.String
			}
		case voicesetting.FieldVoiceName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field voice_name", values[i])
			} else if value.Valid {
				vs.VoiceName = new(string)
				*vs.VoiceName = value.String
			}
		case voicesetting.FieldSpeakingRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field speaking_rate", values[i])
			} else if value.Valid {
				vs.SpeakingRate = new(float64)
				*vs.SpeakingRate = value.Float64
			}
		case voicesetting.FieldPitch:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field pitch", values[i])
			} else if value.Valid {
				vs.Pitch = new(float64)
				*vs.Pitch = value.Float64
			}
		default:
			vs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the VoiceSetting.
// This includes values selected through modifiers, order, etc.
func (vs *VoiceSetting) Value(name string) (ent.Value, error) {
	return vs.selectValues.Get(name)
}

// Update returns a builder for updating this VoiceSetting.
// Note that you need to call VoiceSetting.Unwrap() before calling this method if this VoiceSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (vs *VoiceSetting) Update() *VoiceSettingUpdateOne {
	return NewVoiceSettingClient(vs.config).UpdateOne(vs)
}

// Unwrap unwraps the VoiceSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (vs *VoiceSetting) Unwrap() *VoiceSetting {
	_tx, ok := vs.config.driver.(*txDriver)
	if !ok {
		panic("ent: VoiceSetting is not a transactional entity")
	}
	vs.config.driver = _tx.drv
	return vs
}

// String implements the fmt.Stringer.
func (vs *VoiceSetting) String() string {
	var builder strings.Builder
	builder.WriteString("VoiceSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", vs.ID))
	builder.WriteString("user_id=")
	builder.WriteString(vs.UserID)
	builder.WriteString(", ")
	if v := vs.VoiceName; v != nil {
		builder.WriteString("voice_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := vs.SpeakingRate; v != nil {
		builder.WriteString("speaking_rate=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	if v := vs.Pitch; v != nil {
		builder.WriteString("pitch=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// VoiceSettings is a parsable slice of VoiceSetting.
type VoiceSettings []*VoiceSetting
